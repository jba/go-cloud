// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// static statically implements the virtual filesystem provided to vfsgen.
var static = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/demo": &vfsgen۰DirInfo{
			name:    "demo",
			modTime: time.Time{},
		},
		"/demo/blob.bucket": &vfsgen۰DirInfo{
			name:    "blob.bucket",
			modTime: time.Time{},
		},
		"/demo/blob.bucket/demo_blob_bucket.go": &vfsgen۰CompressedFileInfo{
			name:             "demo_blob_bucket.go",
			modTime:          time.Time{},
			uncompressedSize: 4722,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x7f\x6f\xe3\xb8\x11\xfd\xdb\xfa\x14\xb3\x02\xda\xca\x07\x47\xfa\xb7\x48\x6d\x07\x8d\x93\xdc\x05\x9b\x5b\x07\x1b\xef\x2d\x8a\x6e\xb1\x47\x4b\x23\x8b\xb5\x44\x6a\xc9\x91\x1d\x23\xc8\x77\x2f\x86\x94\x6d\xd9\x71\x16\x59\x14\x45\x0f\x48\x6c\x4b\x24\xdf\xfc\xe0\xbc\xc7\x61\x2d\xd2\xa5\x58\x20\x54\x42\xaa\x20\x90\x55\xad\x0d\x41\x14\xf4\xc2\x54\x2b\xc2\x47\x0a\x83\x5e\x98\x57\xee\xab\xa0\xaa\x4c\x08\xab\xba\x14\x84\xfc\x42\x6a\xfe\x54\x48\x49\x41\x54\xf3\x6f\x6d\xc3\x20\xe8\x85\x0b\x9d\x96\xba\xc9\xe2\x0c\x57\xc9\xbc\xd4\xf3\x30\xe8\x7d\x85\x17\x6f\x93\x5c\x96\xf8\x9d\xe1\x0a\x2b\x3f\xda\x0f\x82\x24\x81\xd9\xf4\x6a\x1a\x99\x95\x50\x0b\x54\xd4\x3f\x87\x59\x21\x2d\x30\x04\x48\x0b\x8d\x45\x73\xb6\x92\x56\xce\x4b\x1c\x80\xc8\x32\xa8\x84\xda\x40\xaa\xab\x0a\x15\x59\xc0\xc7\xba\x14\x52\x49\xb5\x60\xa8\x42\xaf\x41\x12\xac\xb5\x59\xda\x38\x08\xf2\x46\xa5\x20\x95\xa4\xa8\x0f\x4f\x41\x8f\x83\x89\x7f\x11\x2a\x2b\xf1\xa6\x51\x69\x14\x26\x19\x56\xda\xf9\x14\xcf\x9b\x74\x89\x94\x84\x03\xe0\xc7\x4b\xf7\x74\x29\x2c\xfa\xe9\xa6\xff\xa6\xd5\xa5\xb4\x74\x80\x70\x27\x2d\xfd\x10\xc2\x4a\xe2\xfa\x00\xe1\x37\x89\xeb\x1f\x42\x58\x1b\x49\x78\x00\xf1\x99\xdf\xec\x30\x9e\x83\x60\x25\x0c\xf8\xd9\x9f\x3e\xde\x81\x25\xc3\xd9\xdb\xbf\x84\x9f\x1c\x9e\x5f\xdc\x79\x7f\x6d\xcc\x76\xf2\x71\x66\x4f\xec\xe2\x67\xdd\x94\x19\xd8\x8d\x4a\xe3\xa9\x4a\x11\xe6\xfc\x47\x84\x06\xa8\x10\xaa\x5d\x7b\x01\x53\x03\x06\x53\x83\x82\x10\xa8\x40\x07\xd5\x31\x0f\x5a\x01\x8a\xb4\x00\x83\xdf\x1a\xb4\x74\x11\x9c\x34\x76\x79\x37\xbd\xfc\x7a\xf9\x69\xf2\xfe\x7a\xf6\xd5\xc5\x54\x38\xeb\x73\x04\xd9\xae\x9f\x4b\x5d\xe1\x5f\x2c\xa4\x5a\xe5\x72\x01\xb6\x49\x0b\x87\x44\x85\x20\x2e\x99\x54\x28\x9e\x6e\x50\x64\x50\xa0\xc1\x38\xe8\x71\xe4\x68\xdc\xbf\x36\x41\x6f\x9f\xb1\x11\x68\x1b\xff\x8c\x84\x6a\x15\x85\x47\xa6\xc3\x7e\xd0\x93\x79\x27\xbd\xa3\x11\x84\x21\xe7\xe8\x94\xdf\xae\xd4\xa5\x05\x01\x84\xc6\x70\x8d\x43\x86\xb9\x68\x4a\x1a\x80\xc1\x4a\xaf\x10\x34\x27\x2f\xf4\xbb\xca\x53\xb9\xb6\xa5\x5a\xc4\x41\xef\xc0\xa3\x90\x09\x73\x9e\x24\x09\x55\x4c\xd8\xe7\xad\xbf\x03\x17\xc2\xc8\xe7\x74\x5a\xa3\xf2\x79\x8d\x5a\x15\x88\x2f\x45\xba\x5c\x18\xdd\xa8\x2c\xea\x0f\xf6\x6e\xfb\x28\x78\xe9\xbb\x11\x28\x59\xba\x00\xf6\x65\x30\x82\xbc\xa2\xf8\xa1\x36\x52\x51\x1e\x85\x37\x42\x96\x98\x01\x69\xd0\x35\xaa\xee\xfe\x9d\xc3\x9f\x56\xa1\xf3\xa1\xcf\x4e\x3d\xbf\x4e\x78\x69\xa1\x36\x48\xb4\x01\x23\xd6\xf0\xcb\xec\xd7\xbb\x18\x1e\xfc\x36\xae\x11\x0a\xb1\x42\x10\x8e\xf6\x5a\x81\xa5\x4d\x89\x60\x0b\x44\x4a\x90\xd2\x18\x72\x6d\x80\x99\x60\x2f\x9c\x81\x5b\x55\x37\x74\x0e\x91\xaf\xd6\xfe\x41\x41\x7d\xfa\x78\x17\x07\xa9\x56\x96\x8e\x98\x3e\x6b\x05\x10\x46\xf0\x7b\x30\x7c\x77\x35\x9d\xcc\xfe\x71\x7f\x0d\x2c\x8e\xe3\x60\xb8\xfd\x42\x91\x8d\x03\x80\x61\x85\x24\x20\x2d\x84\xb1\x48\xa3\xf0\xd3\xec\xe6\xec\xaf\xa1\x1b\x20\x49\x25\x8e\xbb\x16\xd9\xb1\x61\xe2\xdf\x07\xc3\xc4\x43\x0c\xe7\x3a\xdb\xb8\x05\x35\x7f\x82\x4f\x42\xcd\x8a\xcd\xf3\x95\x25\x23\x08\x2d\x73\x82\x35\x10\x74\x0e\x02\x7e\xd6\x30\xb9\x7a\xdf\x0d\x27\x66\x84\xa4\xee\x02\xdd\x12\xe7\x32\x6d\x8c\x41\x45\xe5\x06\x1a\x2b\xd5\x02\xc4\x41\x12\xe6\xc2\x62\xc6\xdc\x62\x78\x2e\xa0\xf0\xe9\x09\x62\x78\x7e\x0e\x07\xb0\x2e\x64\x5a\x38\xa4\x96\x13\x9e\x32\x8d\xc1\x0c\x56\x52\xb8\x25\xa8\x56\xd2\x68\xc5\x12\x0c\x2b\x61\xa4\xe0\xca\x7d\x41\x85\x13\xce\x3d\x20\xc2\x50\x40\x61\x30\x1f\x85\xac\x66\xf6\x3c\x49\xba\x07\x44\xca\xf5\x5e\x93\x4d\x1a\x53\xda\x24\x1c\x33\x17\x87\x89\x18\xbb\x2d\xae\xb4\x41\x07\x23\x55\xae\x4d\x25\x48\x6a\x05\x62\xae\x1b\xb7\xad\x96\xc9\xde\xa6\xe8\xef\xf7\xb7\xb6\x6b\xbe\x29\xbd\xfd\x61\x29\xc7\x3b\xfb\xb1\x17\xec\x31\xab\xb4\xb3\xc1\xa1\x39\x62\xf0\xc9\xa2\x73\xf7\xec\x8b\x7e\x98\x94\xf2\x24\x82\x13\xec\x31\xab\xf4\x49\x04\x01\xb6\xc6\x54\xe6\x32\x75\xf9\x67\x0f\xdf\x00\xea\xd9\x3e\x76\xc2\xed\x60\x05\x28\x5c\x6f\x11\x48\x9f\xc0\x18\x26\x1c\xe2\x30\xf1\x65\x35\x4c\x7c\xbd\xfe\xde\x2a\xf5\xc9\x33\x2d\x5a\x83\x3b\x4f\x3e\xa2\xad\xb5\xb2\xe8\xcc\x19\x16\x9e\x6f\xf0\x53\x3b\xe2\x44\xd7\x49\x3c\x55\x75\x09\xe7\x23\xd8\xf6\x09\xf1\xaf\x8d\xa5\x68\xf7\xf4\x01\xd7\x51\xc8\x65\x15\xf6\xe3\x7b\x66\x45\x74\x9a\x5d\xfd\xbd\xb2\x30\x58\x55\x97\xf1\xf5\x23\xa6\x0d\x61\xb4\xee\xea\xcf\xdf\x8e\xc5\xc7\x39\x74\xcd\x52\xcc\x13\xd1\x98\xf6\xa1\x3f\xf0\x51\x3c\x90\xa0\xc6\xde\x2a\x42\xa3\x44\xf9\x80\x66\x85\xc6\xcd\xe8\x08\x4f\xab\x0b\xff\xfc\x97\x3f\xe1\x78\xdf\xa7\xf3\x7f\x63\x4a\x2f\x15\x81\xc7\xfe\x4f\x8a\xf0\xf4\x64\x58\x1a\x21\x7e\x7e\xf6\xc5\x91\xc9\x95\x2f\x13\x1e\x93\x39\xc4\xb7\xf6\x4a\x9a\x76\xd4\xcd\x38\xac\xe8\x8b\xda\x60\x2e\x1f\x47\xcc\xe9\xf7\xb8\x61\x5a\x8f\xf7\xbf\xb9\xa0\x76\x68\x58\x5a\x3c\x0d\xc4\x85\x7d\xb1\xc4\xcd\x9b\x50\x54\xb6\xf5\x35\x69\x9d\x3d\x80\x76\x11\x28\xed\xd2\xeb\x58\xba\xad\xdd\xfd\x64\x87\x70\xa2\x7c\xdb\x76\xe0\x45\x3b\x05\x1c\xa8\x97\x47\x49\x58\x39\x54\x01\xdb\x33\xaf\xd6\x96\x3b\xc6\x0d\x34\x2a\x43\x03\x02\x42\x9f\x92\x90\xf1\xbe\x35\x68\x36\x50\x0b\x23\x2a\x24\x34\x31\x5c\x73\x83\xc0\x78\x98\x41\x26\x0d\xa6\xa4\xcd\xc6\x1f\xcb\xa5\x54\x4b\x3e\xd7\x78\xd4\xf7\x0a\xbb\x09\x03\xc6\x12\x2a\xf3\xfd\x85\xd2\xea\xec\x95\xb5\x9c\x49\xbf\x96\xcf\xe8\xf8\x98\x91\x9d\xa0\x7e\x8c\x91\xbb\x36\xe3\xda\x33\xa5\x6d\x33\x0e\x89\xb2\x9b\xf1\x06\x9a\xf4\x0c\x52\x63\x94\xeb\x1e\x74\x4d\x96\x19\xfa\xe7\x3d\x53\x6a\x96\x5b\xcb\x26\xae\xb0\x94\x15\xbb\x76\x0e\x61\x12\x0e\x82\x5e\xef\xde\xa5\xf7\x9c\x37\xdb\xe0\xb7\xf8\x46\x9b\xea\x37\x51\x36\x18\x6d\x13\xdf\x1f\x38\x58\x5e\xc4\xb0\xde\x2d\x87\x1b\xb1\xa9\x7e\xd0\x4b\xe9\x91\x47\x78\xf9\xc4\x37\x27\x51\xdf\x37\x61\x7e\x83\x5f\xb2\x36\xe8\xf1\xa1\xc0\x0e\xf1\x8c\xc1\x56\x54\xd8\x46\xfc\x81\xd7\xa7\xf4\xc8\x61\xb5\x7a\x33\x1a\x81\xd4\xf1\xf5\xf4\xc6\x2d\xe9\xcd\x0d\x8a\x65\xd0\x63\xaf\x4e\xf4\x3a\x47\x69\x7c\xa5\xdd\x61\x53\xae\x73\xd5\xa0\xf0\x91\x0e\xce\xd8\x25\x6e\x3a\xdd\xcf\x5b\xd2\xbf\xcb\xbf\xf7\xc9\x45\x3d\x02\x51\xd7\xa8\xb2\xc8\x3d\x0e\x5c\x2e\x9c\xa2\xbd\x4d\x91\xdd\x01\xf7\x52\x91\xbb\xea\xf6\x7d\x45\x76\x66\xff\x07\x6a\x7c\x44\x82\xce\x35\xe7\x0f\x44\x82\x53\x37\x8d\x4d\xb7\x43\x6f\xd5\x85\x9b\x11\x58\x4b\x2a\x78\xd3\x41\x89\x0a\x21\x33\xba\x3e\xcb\xf4\x9a\x6f\x3a\x96\xf8\x56\xa1\x73\x07\xe8\x6e\x13\xdc\x91\xe9\x86\xe2\xa0\xc7\x0b\xda\xaa\xef\x90\x66\x89\x9b\xf6\x22\xc1\xe3\xa3\x57\xc2\x0a\xbf\xf0\xc4\x2f\xa1\x97\x1b\xbe\x21\x49\x6e\xd2\xf6\xca\x16\x1e\xc4\x7b\x29\xb2\x6d\xe6\x0e\xc2\x7c\x8d\x7a\x7c\x17\xe2\xc4\xb7\x95\xd1\x52\xf6\x03\xae\x3f\xba\x01\x66\xd7\x80\xfd\x1b\x70\x55\x9c\xbc\x30\xbc\x89\x43\xed\xe5\xcf\x83\x32\x63\xbe\xa8\x53\x9c\xf9\xa0\xe9\x86\xaf\x29\x47\x5b\x94\x61\x8e\x06\xbc\xab\xf1\xa4\xd4\x16\xd9\x75\xa9\xe3\x89\xae\x37\x6c\xd5\x0f\xf5\x4f\x6e\xe6\x44\x2b\x2b\x79\x0b\x2d\x12\xf1\x9e\x4c\x7c\xeb\x76\x36\xdb\xd4\x38\xd8\x3d\xdd\xa1\x5a\x50\x01\x85\x43\xb2\xf1\x89\xf2\xed\x5e\xb1\x7f\xac\x7e\xff\x8b\x12\xe3\xb3\xc7\xb5\x84\xdb\x86\x33\x76\x70\x9f\x0b\xf4\x4d\xa6\x5b\x22\x2d\xdc\x4f\x1f\x66\x98\x0d\xc0\x75\x95\xbe\x75\xec\xae\x82\xb6\x9f\x5c\xe2\x26\x0e\x8e\x2b\x6c\xa2\x2b\xce\x8b\xd5\x5a\xbd\x0b\x8f\xf7\xe3\xb6\xaa\x4b\xe4\x3b\x00\x66\xfd\xe0\x39\xf8\x4f\x00\x00\x00\xff\xff\xcc\xfe\x23\xfb\x72\x12\x00\x00"),
		},
		"/demo/secrets.keeper": &vfsgen۰DirInfo{
			name:    "secrets.keeper",
			modTime: time.Time{},
		},
		"/demo/secrets.keeper/demo_secrets_keeper.go": &vfsgen۰CompressedFileInfo{
			name:             "demo_secrets_keeper.go",
			modTime:          time.Time{},
			uncompressedSize: 5596,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xff\x73\xdb\xb6\x15\xff\x59\xfc\x2b\x5e\x78\xb7\x9e\xd8\x2a\x64\x7b\x97\x76\xab\x47\xaa\x97\xda\x72\xe6\x4b\x56\xbb\x96\xb3\xdd\x6e\xb7\x4b\x20\xf2\xd1\x42\x4d\x02\x2c\x00\x4a\x76\x7d\xfc\xdf\x77\x0f\x00\xa9\x2f\x56\x7c\x71\x93\xdd\xb6\xfc\x10\x4b\x00\xde\xe7\x7d\xfd\x3c\xe0\xa9\x61\xf9\x0d\xbb\x46\xa8\x19\x17\x41\xc0\xeb\x46\x2a\x03\xe3\x60\x14\xe6\x52\x18\xbc\x35\x61\x30\x0a\x51\xe4\xb2\xe0\xe2\x3a\x59\x30\x8d\xdf\xbd\xa0\xa5\xb2\xb6\x3b\x4b\x53\x57\x89\xc1\xba\xa9\x98\x41\x5a\x10\x68\x92\xa5\x31\x0d\x7d\x96\x3a\x0c\x82\x51\x78\x2d\xf3\x4a\xb6\x45\x5c\xe0\x2a\xd1\x98\x2b\x34\x3a\x0c\x46\xef\xe0\xd0\x46\x52\xc9\x9c\x55\xc3\xa9\x28\x08\x92\x04\xae\xce\x4f\xce\xc7\x6a\xc5\xc4\x35\x0a\x13\x1d\xc1\xd5\x92\x6b\x28\x79\x85\xc0\x35\xb4\x1a\xd5\xf3\x15\xd7\x7c\x51\xe1\x04\x58\x51\x40\xcd\xc4\x1d\xe4\xb2\xae\x51\x18\x0d\x78\xdb\x54\x8c\x0b\x2e\xae\x09\x6a\x29\xd7\xc0\x0d\xac\xa5\xba\xd1\x71\x10\x94\xad\xc8\x81\x0b\x6e\xc6\x11\xdc\x07\x23\x32\x3c\xfe\x0b\x13\x45\x85\xa7\xad\xc8\xc7\x61\x52\x60\x2d\x7b\xdb\xe2\x1b\xc4\x06\x55\x12\x4e\xc0\xaf\xbc\xb6\x0b\x33\x91\xab\xbb\xc6\x38\x39\x15\x7d\x2c\x0c\x3a\xb1\xcf\x84\x56\xe0\x41\xb4\x13\xdc\x45\xeb\x82\x60\xc5\x14\x38\xa1\xb7\x97\x6f\x40\x1b\x45\xa1\xd9\x2c\xc2\x97\x3d\xb2\x43\xd8\xda\x9a\x29\x05\xa8\x94\x54\x0f\x02\xb7\xc1\xcb\x40\xea\xf8\x15\x1a\x14\xab\x71\x38\x9f\x1d\x5f\xce\xae\xe6\xef\x5e\xcf\x66\x17\xb3\xcb\x77\x6f\x2f\xdf\x84\x51\x30\xe2\xe5\x96\xfe\x2c\x83\x30\x24\x88\xd1\x81\x44\x5f\x62\x2d\x57\x08\x05\x96\xac\xad\x0c\x50\x8d\xa9\x38\x18\xed\xa8\x0b\x5d\x4d\xde\xe0\xdd\x51\x92\xe8\xfa\xd5\xe2\x97\xfa\x8f\xdf\xfc\x74\x5b\x7c\x73\x76\xfd\xed\xe9\xfc\xeb\xf5\x2f\xdf\xcf\xab\xc5\x6f\x2f\xcf\x94\x90\xd5\xf1\x6f\xdf\x2f\x7e\xfe\xf9\xbb\xf6\xe5\xb2\x7a\x91\x85\xc1\xa8\xeb\x2d\x9f\x6c\x79\x98\xf5\x11\x8c\xcf\x1b\x14\x2e\x08\x63\x4f\x86\xf8\x47\x96\xdf\x5c\x2b\xd9\x8a\x62\x1c\x4d\x36\x6e\xd8\xc0\x9a\xbb\x06\xf7\xa2\xcf\x0c\xa3\x08\xb7\xb9\x21\x17\xb7\xe2\x3d\xda\x8a\xe5\xe8\x4c\x00\xfd\x73\x5b\x90\x24\xb6\xa6\x81\x8b\xa6\x35\xc1\xe8\xbc\x35\xbb\x9b\xb2\x35\x76\xe3\x47\xeb\x37\x2c\xa4\xac\x48\x7b\x2e\x85\xb6\xc4\xdd\xb1\xe0\xca\x53\xf3\x42\x61\xc9\x6f\x21\x83\xf7\x41\xfa\xec\xe4\xfc\xf8\xea\x1f\x17\x33\x20\xf2\x4e\x83\xb4\xff\x83\xac\x98\x06\x00\x69\x8d\x86\x41\xbe\x64\x4a\xa3\xc9\xc2\xb7\x57\xa7\xcf\xff\x14\xda\x0d\xc3\x4d\x85\xd3\xdd\xf2\x00\x2a\xc6\x34\x71\x5b\x41\x9a\x38\x94\x74\x21\x8b\x3b\x2b\xd3\xd0\xff\xe0\x28\xdb\x50\x9f\xa1\xf3\x42\x1b\xc5\x0c\x6a\x30\x4b\x24\x67\x41\x96\xc0\xe0\x95\x84\xe3\x93\xd7\xb0\x8b\x1f\x13\x48\xd2\x6c\x63\x9d\x19\xe2\x7d\xde\x2a\x85\xc2\x54\x77\xd0\x6a\x8a\x0c\xdb\x13\x04\xaa\x8b\x02\xa4\xb0\x4a\x28\xf4\xe1\xfd\x3d\xc4\xf4\xa1\xeb\xc2\x09\xac\x97\x3c\x5f\x5a\xbc\x9c\x09\x58\x20\xe4\x52\x94\xfc\xba\x55\x58\xc0\x8a\x33\x2b\x85\x62\xc5\x95\x14\xd4\x48\x60\xc5\x14\x67\x8b\x0a\xe1\x50\x55\x1f\xb0\x72\x8e\x08\x29\x83\xa5\xc2\x32\x0b\x89\xc3\xfa\x28\x49\xb6\x3b\x5e\x2e\x45\x8e\x8d\xd1\x49\xab\x2a\x9d\x84\xd3\x25\x2a\x4c\x13\x36\x85\x52\x2a\xa8\xa5\x42\x0b\xc3\x45\x29\x55\xcd\x0c\x97\x02\xd8\x42\xb6\x86\x5c\xd1\xc0\x45\x1f\xae\x97\x17\x67\x7a\x5b\x7d\x5b\x39\xfd\x69\xc5\xa7\x83\xfe\x78\xe8\x36\x53\xdf\x5f\xac\x26\x17\x39\xf2\xd4\xc5\x2c\x4d\x2a\x7e\x50\xba\xef\x2e\x53\xdf\x4f\x1e\x95\x4e\x13\x67\xc3\xfd\x3d\x2f\x21\x9e\x29\xd5\x75\x0e\xb3\x99\xa6\xda\x28\x29\xae\xa7\x94\x09\x62\x40\xd7\xa5\x89\x5f\xf2\xf6\xdf\xdf\xa3\x28\xba\x2e\x78\xff\x81\x42\x9e\xb7\xe5\x50\xc8\x89\xab\xb2\x34\x71\x15\xfc\x3e\x08\xa8\x89\x9c\x11\x6f\x8e\x86\x36\xb6\x61\x62\xbc\x07\xe9\x23\xd1\x23\x6f\x88\x7f\x90\x3a\x5f\xc1\x7b\xf2\x8d\xb2\x31\xed\xdd\xb1\x7f\x01\x66\xc2\xa0\x02\x7b\xcd\x50\x93\x80\x82\x68\x6f\x24\xf8\x98\x1f\xf9\x63\xe9\x42\x25\xbd\x48\x4a\x07\x99\x42\x06\x4a\xae\x75\x16\xbe\x08\x21\x97\x95\xce\xc2\x6f\xbf\x0e\x41\xb0\x1a\xb3\x70\xc0\x0b\xa1\x62\x0b\xac\xb2\xf0\x62\xd0\xb0\x01\x0f\x6d\x2c\xcf\x84\x0d\x65\x0f\xea\x0d\x4c\xbc\x85\xa9\x6d\x25\x40\xfd\x29\x0b\xf3\x25\xe6\x37\x0b\x79\x1b\x02\x2f\x32\xdf\x3c\x7b\x95\xfd\xb7\x15\xab\x5a\xcc\x42\xa3\x5a\x0c\x7d\x1a\x5d\xb7\xe9\x3a\x2b\x8e\x85\x4f\x53\x5f\x2c\x64\x1f\xd5\xed\x00\x31\xbd\x5a\xa2\x8b\x03\x5b\x50\x0b\xe7\x1a\xdc\x0e\xd8\xb7\x04\x16\x69\x62\x85\x3c\xc0\x10\x99\x1d\x53\x75\xbb\xa8\xb9\x19\xcc\xf1\xf9\x7a\xe6\x9a\x51\xd2\x67\xc2\xd9\x77\xde\x9a\x4d\x99\x0d\x79\xb1\x02\x58\x80\x42\x4d\x17\xc8\x78\xd7\x86\xe8\xc9\x99\x51\xc8\x0a\x29\xaa\xbb\x3e\x36\x3e\x31\xfb\x8a\x5c\x52\xa8\x73\x3f\x96\x95\x82\xaf\x06\xa5\x0f\xa8\xf6\x43\xce\x9b\x25\x2a\x92\xcd\x36\x60\x5f\x38\x07\xec\x8a\xef\xff\x5d\x37\xb0\x12\xb8\x25\xa6\x57\xe3\xe1\x07\x42\xc1\x57\x87\xeb\xdb\x31\xea\x89\xdc\xf1\x1a\x3f\x17\x77\x9c\x5b\xcf\x7d\x5e\x06\x02\xf9\x58\xfc\x4e\x02\x6d\x22\x38\x24\xea\x78\x58\xda\x82\xff\x5f\xa5\xd0\x9c\x1e\xab\xbe\x72\x77\x03\xf4\x3b\xc8\xe3\x13\xf6\xf1\xe4\xf1\x02\x43\x4d\x7f\x2e\xae\xec\xe3\x7e\x0a\x57\x7c\x0f\xfc\x61\x68\x95\x07\xa9\x32\x04\x7e\xb8\xfc\x3e\x89\x28\x91\x7b\x42\xef\xbf\xb4\xfa\xdb\xa4\x6e\x2a\xc8\xa0\x1f\x89\xe2\xbf\xb6\xda\x8c\x87\x6f\x3f\xe1\x7a\x1c\xee\xbd\x53\xfa\x46\x1e\xc5\x17\xf4\xe4\x1a\x3f\x76\x47\x45\xd1\x07\x78\xf8\x64\xad\x7d\xed\x1f\xd4\xba\xc7\xee\x28\xf2\x83\xd8\x23\x83\x0a\xb0\xaa\x92\xeb\xe1\x45\xa7\xdc\x15\x45\xdc\xd6\xb2\xc6\x81\xd1\x0b\xec\xfd\xc5\x22\x76\x53\xc4\x23\xa0\xe3\x35\xd8\xe9\xe7\x12\x75\x23\x85\xc6\xbf\x2b\x6e\xe8\xb1\xae\xf0\x57\xf8\xd2\xef\xfc\xda\xa2\x36\x76\x08\x71\xd5\x7f\x94\xc1\x17\x0f\xda\x17\xcd\x17\x6f\x2f\xdf\x1c\x51\xc2\x87\x47\xfb\x24\x18\x8d\xce\x84\x5d\x23\xc4\xf8\x54\xaa\xfa\x6f\xc4\x96\xf1\xd6\xdd\x1b\xd1\x29\x57\x40\x47\xfb\xa7\x3c\x51\x23\x3b\xc4\xd8\x22\x9f\xd8\x99\xa2\xc0\x12\x15\x90\x73\x6e\x3a\xa2\x89\x07\x95\x22\xd3\x3e\x54\x32\xf1\xec\x16\xf3\xd6\xe0\x78\x3d\x71\x0f\xff\xe8\xcf\x56\xe4\x59\x06\x82\x57\x16\xc4\x0d\x82\x33\x9a\x19\xe8\x14\x2a\xe5\xbf\x44\x13\x17\xa5\xb9\x61\xa6\xd5\x67\x14\x74\xc1\xaa\x39\xaa\x95\x1d\x68\x24\x0d\x91\x64\x56\x37\x8e\x82\xad\xe9\x6b\xb6\x0b\x6f\xb5\xc6\x6e\x00\x1a\x0e\x04\xa3\x91\x42\xd3\x2a\x61\xfd\xe2\xa5\xb3\x8d\x7a\xe5\xb3\x61\x6e\x23\x32\x70\x01\xff\xfc\xd7\xe2\xce\xa0\x73\xd6\x9d\xf2\x17\x94\xb5\x9d\x0e\xe1\x30\xf2\x8c\x48\x9d\x75\x01\x32\xdf\xda\xe2\xb9\x29\x66\xfe\x67\x86\xf8\x04\xa9\xcd\xcd\xed\xc8\x33\xee\x55\x46\x56\xac\x7c\x10\x96\x1d\xcb\xcb\xda\xb8\xa8\x94\xe3\xad\xe7\x92\xad\xbe\x35\xd3\x20\x24\x3d\xe4\x2b\x5e\x40\x9f\xd2\x3f\xac\x42\x6b\x88\x45\x1f\x9c\xb5\xf1\x1a\x75\x80\x95\x46\xa7\x85\x0b\xc8\xbc\x8f\x3b\x16\xd1\xb9\xa1\xa2\x27\x7d\x9a\x5d\x00\x63\x9f\xe0\x31\xd5\xcd\xb1\x9b\x20\x29\x5b\xdc\x4a\x1e\x70\xe5\x43\x9e\x9c\x32\x5e\x61\xb1\xfd\xa4\xdc\xb5\x7b\x30\xbb\x1b\x12\x49\x4d\xf0\x60\x6c\xed\x07\xbc\x92\x3e\xba\x83\xed\x11\xa5\xb8\x7b\x48\xf3\xdd\x5f\x10\x3e\x9e\xe6\x05\x3e\x42\xf3\x5d\xd0\xff\x1a\xcd\xb7\x5e\x08\xff\x49\x9e\x6f\x35\xe9\xff\x63\x9e\xf7\x8c\x3d\x7a\x1a\x65\x9f\x50\xe6\x5b\xaf\xb3\x8f\x65\xec\x4e\xe5\x0f\x25\xb7\xcf\x43\x9f\x80\xcf\xc8\xc3\xfe\x65\xfa\x18\x0f\x0f\xf5\xc1\xa7\x91\x73\x70\x28\x7a\xd0\x8d\x36\x30\xfa\xd0\x59\x47\xe6\x7f\x07\x00\x00\xff\xff\x13\x1e\x21\x8b\xdc\x15\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo"].(os.FileInfo),
	}
	fs["/demo"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket"].(os.FileInfo),
		fs["/demo/secrets.keeper"].(os.FileInfo),
	}
	fs["/demo/blob.bucket"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket/demo_blob_bucket.go"].(os.FileInfo),
	}
	fs["/demo/secrets.keeper"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/secrets.keeper/demo_secrets_keeper.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
